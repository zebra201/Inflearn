# 스레드(thred) 이론
# 스레드는 작업단위, 하나의 프로세스 안에서 여러가지의 스레드가 이루어짐
# 프로그램은 파일이 저장 장치에 저장되어 있지만,
# 메모리에 올라가 있지 않은 정적인 상태이다.
# 프로세스는 하나의 실행 프로그램 을 의미
# 스레드는 프로세스 안의 작업단위를 정해놓은 1~N 개로 정의된 것
# 프로세스 안에서 N 개의 스레드가 존재하고, 자원을 공유할 수 있다.
# (ex : 놀이터(프로세스) 안에서 어린이(스레드)가 놀이기구(리소스)를 공유할 수 있다.)
# CPU 의 최소단위는 스레드 이지만, (ex: 카카오톡-채팅스레드, 파일전송 스레드)
# 운영체제의 입장에서는 프로세스가 최소작업 단위이다.
# 스레드를 활용하는 것이 리소스를 아낄 수 있다.
# 싱글 스레드 : 메인 스레드가 종료하면 프로세스도 같이 종료된다.
# 멀티 스레드 : 메인 스레드가 종료되어도 작업 스레드가 작동 중이라면 프로세스는 종료되지 않는다.

# 스레드(thred) 이론2
# 스레드를 상속받으면 run 메소드로 실행할 수 있다.
# 메인스레드가 서브 스레드를 생성하는 것을 fork 라고 한다.
# fork 와 join
# 반복문을 통해 여러 서브 스레드를 생성해야 하는 경우엔은 생성된 스레드
# 객체를 파이썬 리슽으에 저장한 후 반복문을 이용하여 각 객체에서
# join() 메서드를 호출할 수 있다.

# ------------------------------------------------------------------------

# 실습
# 프로세스 : 하나의 응용 어플리케이션 프로그램이 메모리에 로딩이 되어 CPU에 의해 실행된 상태
# 스레드 : 하나의 프로세스 내에서 작업 단위를 의미한다. 최소 1 ~ N 개까지 만들 수 있다.
# 하나의 코어는 하나의 스레드를 도맡아서 처리한다. 코어가 많을수록 PC 처리능력이 좋다.
# 메인스레드 : 파이썬 인터프리터가 제일 먼저 시작하는 부분을 메인 스레드라고 칭한다.
# 메인스레드는 여러 개의 서브(작업)스레드를 만들어서 실행시킬 수 있다.
# 특정 스레드가 또 다른 스레드를 만들어서 실행하는 것도 가능하다.
# 서브(작업)스레드를 만들어서 병렬로 코드를 실행시킬 수 있다. 이것이 바로
# 스레드를 이용한 멀티태스킹을 의미한다.
# 메인스레드가 작업스레드보다 먼저 종료가 되더라도, 작업스레드가 계속 실행중이라면
# 프로세스는 종료되지 않는다.

import threading
import time

# 스레드 클래스 정의
# 스레드가 되기 위해서는 threading.Thread 클래스 상속을 반드시 받아야 한다.
class Worker(threading.Thread):
    # 생성자
    def __init__(self, name):
        super().__init__()      # 조상클래스 생성자 호출
        self.name = name
    
    # CPU 스케쥴러에 따라서 특정 스레드가 먼저 시작하였다 하더라도 CPU 스케쥴러에 따라서
    # 종료되는 순서가 바뀔 수 있다.
    def run(self):
        print("작업 스레드 시작 : ", threading.currentThread().getName())
        time.sleep(3)       # 3초간 스레드 일시정지
        print("작업 스레드 종료 : ", threading.currentThread().getName())
        
if __name__ == "__main__":
    print("메인스레드 시작")
    # 5개의 스레드가 생성되고 시작된다.
    for i in range(5):
        name = "스레드->{}".format(i)
        t = Worker(name)        # 작업 스레드 생성
        t.start()               # 작업스레드에 구현되어 있는 run() 메소드를 자동호출함.
    
    print("메인스레드 종료")
# 이론1
# 객체 지향 프로그래밍(OOP : object-oriented programming)
# 내장 모듈이 아닌 직접 클래스를 만들어서 사용
# 객체 고유한 기능을 수행
# 클래스 : 설계도(붕어빵틀)
# 인스턴스(객체) : 붕어빵틀로 찍어낸 붕어빵들
# 클래스 안에서 구현된 함수는 함수라 하지 않고, 메소드라고 한다.
# 선언부, 구현부
# self : 자기 자신의 주소를 가지고 있는데, self.speed는 speed를 의미한다
# 주의할 점은 매개변수 self를 실제로 전달받지는 않으며, value 만 전달 받는다
# 아울러 이 self 라는 단어는 객체를 생성 해야지만 비로소 활성화 된다.

# 이론2
# self 는 매개변수로 보기보다는 메소드 안에 무조건 써야하는 것으로 보는 것이 편함(문법)
# 메모리 상에서(참조변수, 스택, 인스턴스(참조변수의 주소를 가지고 있음))
# myCar1 = Car()
# myCar2 = Car()
# myCar3 = Car()
# 인스턴스가 생성되면 각 자동차는 독립적인 메모리 공간을 차지한다.
# 인스턴스명 = 참조변수

# Car 클래스의 생성과 사용 순서
# 1단계 : 클래스 선언 / class 명(필드 선언, 메소드 선언)
# 2단계 : 인스턴스 생성 / 인스턴스 = 클래스명()
# 3단계 : 필드나 메소드 사용 / 인스턴스, 필드명 = 값 / 인스턴스,메서드()
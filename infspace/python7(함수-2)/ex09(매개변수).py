# 매개변수와 지역변수와의 관계
# 함수가 외부로부터 값을 전달 받는데 사용하는 매개변수도 일종의 지역변수이다.
# 튜플의 자료구조는 변경이 불가능한 자료구조. 데이터 타입을 하나로 침.
# 리스트는 []으로 둘러싸지만 튜플은 ()으로 둘러싼다.
# 리스트는 그 값의 생성, 삭제, 수정이 가능하지만 튜플은 그 값을 바꿀 수 없다.
# 무명함수(람다식) -> 여러 개의 인수를 가질 수 있으나 반환값은 하나만 있어야함.
# 람다함수는 리턴이 필요 없으며, 어디든지 사용 가능하나 통상적으로 이벤트 처리, 콜백함수에서 많이 사용된다.
# 리스트는 시퀀스가 될 수 있다.

# 매개변수는 함수의 선언부에 존재하며 함수가 호출될 때 비로소 메모리에 할당이 된다.
# 함수가 종료되면 매개변수도 소멸이 된다.
# 매개변수도 지역변수의 일종이다.

def list_test(my_list):
    print("함수 내 매개변수 my_list의 주소값 : ", id(my_list))
    # 매개변수로 넘어온 my_list에 새로운 리스트를 할당한다.
    # 매개변수로 넘어온 메모리의 주소를 버리고
    # 새롭게 할당된 리스트의 주소를 가지게 된다.
    my_list += [1,2,3,4]
    print("함수 내 매개변수 my_list의 할당 후의 주소값 : ", id(my_list))
    print("함수 내부에서의 my_list 값 출력 : ", my_list)
    return

# my_list 타입은 list 이므로 변경가능(mutalbe)한 객체 
my_list = [100,200,300,400]
print("함수 호출 전 my_list의 주소값 : ", id(my_list))
list_test(my_list)
print("함수 호출 후 my_list의 주소값 : ", id(my_list))
print("함수 외부에서의 my_list 값 출력 : ", my_list)
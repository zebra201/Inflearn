# 내장함수 이론
# 파이썬 인터프리터에는 항상 사용할 수 있는 많은 함수가 준비되어 있음.
# 내장함수 정보 : https://docs.python.org/3/
# abs() 함수 : 숫자의 절대값을 반환하는 데 사용, 정수 및 부동 소수점 수를 포함하여 모든 수에 적용가능
# all() 함수 : 시퀀스(리스트나 딕셔너리)를 받아서, 모든 항목이 참이면 True 를 반환한다.
# any() 함수 : 시퀀스 객체에서 한개의 항목이라도 참인 경우 True 를 반환.
# bin() 함수 : 정수의 이진 표현을 반환. 항상 접두사 0b 로 시작한다.
# eval() 함수 : 전달된 수식을 구문 분석하고 프로그램 내에서 수식을 계산한다.
# list() 함수 : 리스트를 생성하는 함수

# ---------------------------------------------------------
# 내장함수 이론2
# dir() : 객체가 가지고 있는 변수가 함수를 보여준다.
# filter() : 특정 조건을 만족하는 요소만을 뽑는다.

# ---------------------------------------------------------

# abs() : 절대값을 반환
i = -20
print("-20의 절대값 : ", abs(i))
i = -20.55
print("-20.55의 절대값 : ", abs(i))
print("-"*50)

# all() : 시퀀스(리스트, 딕셔너리 등)을 받아서 시퀀스의 모든 항목이 참이면 True를 반환
# and 조건과 유사하다. 하나라도 0인 값이 들어가면 False 를 리턴한다.
list1 = [1,4,7,10]       # 모든 값이 참이다.
print(all(list1))
list1 = [1,4,0,10]       # 0이 하나 있다
print(all(list1))
list1 = [0,0,0,1]
print(all(list1))
print("-"*50)

# any() 함수 : 시퀀스 객체이 있는 한 개의 항목이라도 참인경우에 참을 반환한다.
# or 개념과 유사하다.
list2 = [0,7,10,20]      # 1개의 값이 False 이므로 True 리턴
print(any(list2))
list2 = [0,0,0,0]        # 모든 값이 False 이므로 False 리턴
print(all(list2))
print("-"*50)

# bin() 함수 : 10진수를 이진수로 표현해주는 함수. 항상 접두사 0b로 시작
k = bin(15)
print(k)
print("-"*50)

# eval() 함수 : 전달된 수식을 구문 분석을 하고 프로그램내에서 수식 값을 계산하는 함수
exp = input("수식을 입력해주세요 : ")
print("답 :", eval(exp))
print("-"*50)

# eval()는 전역변수의 수식도 구문분석하여 계산한다.
x = 10
y = 15
print("eval함수",eval("x*y"))
print("-"*50)

# sum() : 리스트에 존재하는 항목들의 값을 전부 더하여 합계를 리턴한다.
print("sum함수",sum([1,10,100]))
print("-"*50)

# len() : 객체의 길이를 반환하는 함수. 문자열의 길이를 계산하는데 유용하다
# 리스트에 len() 사용하게 되면 리스트 안에 있는 항목의 개수를 리턴
# 딕셔너리, 튜플에서도 항목의 개수를 반환
print(len("안녕하세요, hello! _"))
print(len([1,2,3,4,5,6,7]))
dic = {
    "a":7,
    "b":10,
    "c":15
}
print(len(dic))
tup = (2,7,5,4,3)
print(len(tup))
print("-"*50)

# list()함수 : 리스트를 생성하는 함수
s = "abcdefg"
print(list(s))
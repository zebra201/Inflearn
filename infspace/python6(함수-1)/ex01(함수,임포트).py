# 함수(function)에 대한 실습
# 1. 함수는 프로그램 안에서 중복된 코드를 제거한다.
# 2. 복잡한 프로그래밍 작업을 더 간단한 작업들로 분해를 할 수 있다.
# 3. 함수는 한번 만들어두면 재사용이 얼마든지 가능하다.
# 4. 함수를 사용하면 가독성이 증대되고, 유지관리가 쉬워진다.
# 함수 -> 메서드로 명칭 변경
# 매개변수 = 인자값 = parameter = arguments
# 함수(function)은 특정 작업을 수행하는 명령어들의 모음.
# 함수의 구현부보다 선언부가 더 중요하다. (내부는 몰라도 구현은 가능)
# 오버로딩(메서드 명이 동일하고, 매개변수가 다름, 파이썬 미지원)



# def 키워드 함수이름(매개변수)

# hello 파일에 있는 내용을 전부 다 가져오기 때문에 파일이름.함수명으로 접급할 필요가 없다.(함수명만 호출하면 된다.)
from hello import *
# 파일명.함수명으로 접근해야 한다.
# import hello
    

# 함수 호출(function call)
say_hello_name("신은혁")     # 신은혁이라는 매개변수에 따라 결과값이 바뀌며
say_hello_name("이현호")     # 신은혁이라는 리터럴 값이 name에 대입
# 함수가 호출되어 10을 출력하긴 하지만 가독성이 좋지 않음.
# 함수의 매개변수명이 name 이므로 이름을 매개변수 값으로 주는것이
# 현명한 코드임.

# import.hello
# hello.say_hello_name(10)   
print("-"*50)

# 파이썬에서는 오버로딩의 개념이 없다.
# 같은 함수의 이름이라면 마지막에 정의되어진 함수만 인식하게 된다.
# 하여, 함수명은 유니크한 값으로 함수명을 정해야한다.
    
say_hello_name_msg("신은혁", "반갑습니다.")
say_hello_name_msg("이현호", "도와주세요.")
print("-"*50)


# 함수를 정의하고 선언하는 코드와, 개발코드는 가급적 다른 곳에 작성할 것.
# get_sum()을 이용하여 범위값의 누적합을 구하는 코드
    
result = get_sum(1,10)
print(type(result))
print("1~10 누적합 : ", result)

result = get_sum(1,30)
print(type(result))
print("1~10 누적합 : ", result)

result = get_sum(1,100)
print(type(result))
print("1~10 누적합 : ", result)
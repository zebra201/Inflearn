# 인수는 호출프로그램에 의하여 함수에 실제로 전달되는 값
# 매개 변수는 이 값을 전달받는 변수
# 매개 변수의 값은 인수의 개수와 정확히 일치하여야 함.
# 스택과 큐 : 후입선출 (입구가 하나, 나중에 들어온 값이 먼저 나감)

# Call by value(값에 의한 호출)는 인자로 받은 값을 복사하여 처리를 한다.
# Call by reference(참조에 의한 호출)는 인자로 받은 값의 주소를 참조하여 직접 값에 영향을 준다. 간단히 말해 값을 복사를 하여 처리를 하느냐, 아니면 직접 참조를 하느냐 차이인 것이다.
# 프로그래밍 구조상 Call by value(값에 의한 호출)를 하면 복사가 되기 때문에 메모리량이 늘어난다. 요즘에는 기기의 성능이 좋아져서 상관이 없다지만 많은 계산이 들어간다면 과부하의 원인이 된다. 하지만 복사처리가 되기 때문에 원래의 값은 영향을 받지 않아서 안전하다.

# Call by value(값에 의한 호출)
# 장점 : 복사하여 처리하기 때문에 안전하다. 원래의 값이 보존이 된다.
# 단점 : 복사를 하기 때문에 메모리가 사용량이 늘어난다.
# Call by reference(참조에 의한 호출)
# 장점 : 복사하지 않고 직접 참조를 하기에 빠르다.
# 단점 : 직접 참조를 하기에 원래 값이 영향을 받는다.(리스크)

# 반환값 : 함수가 호출한 곳으로 반환하는 작업의 결과값.
# 파이썬은 함수가 값을 밚놘하지 않는 경우에는 None 값을 반환.(어떤 객체도 참조하지 않는다)
# 디폴트 인수 : 함수의 매개변수가 기본값을 가짐.

# 키워드 인수 cal(x,y,z) = cal(10,20,30)

# 함수가 리턴값이 없는 경우에 대한 예제
def printInfo(name,age):
    print("================")
    print("이름 : ", name)
    print("나이 : ", age)
    print("================")
    # 리턴값이 존재하지 않는다면 return문 뒤에 아무 내용도 기재하지 않는다.
    return      

end_Input = "y"
print("이름과 나이를 입력해주세요.")
while True :
    if end_Input == "n":
        print("입력을 종료합니다.")
        break
    elif end_Input == "y":
        name = input("회원명을 입력해주세요 : ")
        age = int(input("회원님의 나이를 입력해주세요 : "))
        printInfo(name, age)
    
    end_Input = input("계속 입력하시겠습니까? (y or n) : ")
    
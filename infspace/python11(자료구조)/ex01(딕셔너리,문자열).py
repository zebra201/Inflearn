# 딕셔너리 : 키(key)와 값(value)의 쌍을 저장할 수 있는 객체이다.
# set(세트)와 마찬가지로 중복되는 값은 허용되지 않는다.
# 딕셔너리는 중괄호{}를 사용한다
# dict = {키1 : 값1, 키2 : 값2, ...}     
# 딕셔너리에 접근하려면 키[]를 입력하면 된다.
# contacts = {"Kim":"1", "Lee":"2"}
# print(contacts["Kim"])
# contacts.get["Kim"]
# 파이썬 딕셔너리는 요소들을 순서대로 저장하지 않으나, sorted() 함수를 통해 가능하다.

# 딕셔너리 생성방법은 {} "키:값" 같은 형태로 요소를 넣어주면 된다.
dict1 = {1:"사과", 2:"토마토", 3:"오렌지"}
print(dict1)
# 딕셔너리의 키 값은 변경 불가능한 객체이어야 한다. 문자열이나 숫자를 권장한다.
# 아래와 같이 키 값을 리스트로 주니, TypeError: unhashable type: 'list' 발생
# dic2 = {[1]:"사과", [2]:"토마토", [3]:"오렌지"}

# 딕셔너리의 키 값의 자료형은 혼합되어도 된다.(권장하지 않음)
dict2 = {1:"사과", "2":"토마토", (3,):"오렌지"}
print(dict2)

# 공백 딕셔너리를 만드는 방법
dict3 = {}
print(dict3)

# set 객체도 역시 {} 사용하기 때문에 혼돈이 있을 수 있다.
# 하여 set 을 생성할때에는 내장함수 set()를 사용해야 한다.
set1 = set()
print(set1)

# 딕셔너리 항목 추출하는 방법
dict4 = {1:"사과", 2:"토마토", 3:"오렌지"}
# 첫 번째 방법은 []안에 키 값을 주면 값을 얻을 수 있다.
print("dict4[2]키의 값은 : ", dict4[2])
# 두 번째 방법은 get()를 사용하는 방법
print("dict4[1] 키의 값은 : ", dict4.get(1))
# 만약에 키가 딕셔너리에 존재하지 않으면 KeyError 가 발생한다.
print("dict4[5] 키의 값은 : ", dict4.get(5))    # 리턴값이 None 발생
# print("dict4[1] 키의 값은 : ", dict4[5])        # 에러 발생

# 키가 딕셔너리에 없으면 디폴트 값을 사용하는 방법
a = dict4.get(5, "파인애플")
print(a)

# 키가 딕셔너리에 존재하는지 알아보는 방법
print(1 in dict4)
print(5 not in dict4)

print("-" * 50)
# 딕셔너리 항목 추가하는 방법, 딕셔너리는 변경 가능한 객체이다.
# 하여 값을 추가, 삭제를 해도 동일한 주소값을 가지고 있다.
dict5 = {1:"사과", 2:"토마토", 3:"오렌지"}
print("요소추가 전 주소 : ", id(dict5))
dict5[4] = "파인애플"
print("요소추가 후 주소 : ", id(dict5))

print("-" * 50)
# 딕셔너리의 항목을 삭제하는 방법
# pop() 메서드를 이용하여 키를 주면 해당하는 값이 삭제된다.
dict6 = {1:"사과", 2:"토마토", 3:"오렌지"}
a = dict6.pop(2)
print(a)
print(dict6)

# 또 다른 삭제방법은 del 키워드를 이용한다.
dict7 = {1:"사과", 2:"토마토", 3:"오렌지"}
del dict7[1]
print(dict7)

# 딕셔너리의 모든 항목을 삭제하고자 할 때, clear()메서드를 사용하면 된다.
dict7.clear()
print(a)
print(dict7)